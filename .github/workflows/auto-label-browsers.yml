name: Auto-label QA Status

on:
  issues:
    types: [opened, edited]

permissions:
  issues: write

jobs:
  label-qa-status:
    runs-on: ubuntu-latest
    steps:
      - name: Set QA Status and Priority Labels
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const qaTemplate = "### Priority (optional)\n\nNot Assigned\n\n### Browsers/Devices Tested\n\n- [ ] Chrome - desktop\n- [ ] Safari - desktop\n- [ ] Firefox - desktop\n- [ ] Chrome - mobile\n- [ ] Safari - mobile\n- [ ] Firefox - mobile\n\n### Browsers/Devices Passed\n\n- [ ] Chrome - desktop\n- [ ] Safari - desktop\n- [ ] Firefox - desktop\n- [ ] Chrome - mobile\n- [ ] Safari - mobile\n- [ ] Firefox - mobile\n\n### Notes and Issues\n\n";

            // Get the current issue body
            let issueBody = context.payload.issue.body;
            let wasEmpty = false;

            // If the body is empty or only whitespace, populate it with the template
            if (!issueBody || !issueBody.trim()) {
              wasEmpty = true;
              issueBody = qaTemplate;
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: issueBody
              });
            }

            // Helper to extract checked items from a markdown checkbox list
            function getCheckedItems(body, sectionLabel) {
              if (!body) return [];
              const regex = new RegExp(sectionLabel + '[\\s\\S]*?(?:- \\[[ xX]\\] .+)+', 'm');
              const section = body.match(regex);
              if (!section) return [];
              return Array.from(section[0].matchAll(/- \[[xX]\] (.+)/g)).map(m => m[1].trim());
            }

            // Extract tested and passed browsers/devices
            const tested = getCheckedItems(issueBody, "Browsers/Devices Tested");
            const passed = getCheckedItems(issueBody, "Browsers/Devices Passed");

            // Define QA Status labels
            const passLabel = "QA Status: Pass";
            const failLabel = "QA Status: Fail";
            const inProgressLabel = "Status: In Progress";
            const toTestLabel = "Status: To Test";

            // Priority mapping
            const priorityMap = {
              "High": "Priority: High",
              "Medium": "Priority: Medium",
              "Low": "Priority: Low",
              "Not Assigned": "Priority: Not Assigned"
            };
            const allPriorityLabels = Object.values(priorityMap);

            // Extract selected priority from the issue body
            let selectedPriority = null;
            if (issueBody) {
              const priorityMatch = issueBody.match(/### Priority \(optional\)[\s\S]*?\n([^\n]+)/);
              if (priorityMatch) {
                selectedPriority = priorityMatch[1].trim();
              }
            }
            const priorityLabel = priorityMap[selectedPriority];

            // Current labels on the issue
            const currentLabels = context.payload.issue.labels.map(label => label.name);

            // Prepare labels to add and remove
            let labelsToAdd = [];
            let labelsToRemove = [];

            // Status labels logic
            if (wasEmpty) {
              // If the issue was blank and just populated, label as "To Test"
              labelsToAdd.push(toTestLabel);
              labelsToRemove.push(passLabel, failLabel, inProgressLabel);
            } else {
              // Determine if all tested browsers passed
              const allPassed = tested.length > 0 && tested.every(browser => passed.includes(browser));
              if (allPassed) {
                labelsToAdd.push(passLabel);
                labelsToRemove.push(failLabel, inProgressLabel, toTestLabel);
              } else {
                labelsToAdd.push(failLabel);
                labelsToRemove.push(passLabel, inProgressLabel, toTestLabel);
              }
            }

            // Priority labels
            if (priorityLabel) {
              // Add the selected priority label if not present
              if (!currentLabels.includes(priorityLabel)) {
                labelsToAdd.push(priorityLabel);
              }
              // Remove all other priority labels
              labelsToRemove.push(...allPriorityLabels.filter(l => l !== priorityLabel));
            }

            // Remove old labels and add new ones
            const updatedLabels = currentLabels.filter(label => !labelsToRemove.includes(label)).concat(
              labelsToAdd.filter(label => !currentLabels.includes(label))
            );

            // Update the issue labels
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: updatedLabels
            });
